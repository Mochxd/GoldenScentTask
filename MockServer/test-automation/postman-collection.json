{
  "info": {
    "name": "Golden Scent API Tests",
    "description": "Comprehensive test collection for Golden Scent Loyalty Points and Wallet system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "validToken",
      "value": "Bearer valid_auth_token_12345",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "user_12345",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "order_12345",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Setup",
      "item": [
        {
          "name": "Create Test Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"total\": 299.00,\n  \"currency\": \"SAR\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(pm.response.json().success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Loyalty Points",
      "item": [
        {
          "name": "Get Loyalty Balance - Valid User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/loyalty-balance",
              "host": ["{{baseUrl}}"],
              "path": ["user", "loyalty-balance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('User ID matches', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.userId).to.eql('user_12345');",
                  "});",
                  "",
                  "pm.test('Available points is positive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.availablePoints).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Currency is SAR', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.currency).to.eql('SAR');",
                  "});",
                  "",
                  "pm.test('Region is KSA', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.region).to.eql('KSA');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Loyalty Balance - Invalid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/loyalty-balance",
              "host": ["{{baseUrl}}"],
              "path": ["user", "loyalty-balance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains invalid token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid authentication token');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Loyalty Balance - Guest User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "User-ID",
                "value": "guest_67890"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/loyalty-balance",
              "host": ["{{baseUrl}}"],
              "path": ["user", "loyalty-balance"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains guest access', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Guest users do not have access');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Checkout - Apply Points",
      "item": [
        {
          "name": "Apply Points - Valid Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"pointsToUse\": 100,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/apply-points",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "apply-points"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Points applied correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pointsApplied).to.eql(100);",
                  "});",
                  "",
                  "pm.test('Discount amount calculated correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.discountAmount).to.eql(10.00);",
                  "});",
                  "",
                  "pm.test('Updated order total is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.updatedOrderTotal).to.eql(289.00);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Apply Points - Insufficient Points",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"pointsToUse\": 10000,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/apply-points",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "apply-points"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains insufficient points', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Insufficient loyalty points');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Apply Points - Exceed Maximum Percentage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"pointsToUse\": 5000,\n  \"orderTotal\": 100.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/apply-points",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "apply-points"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains exceed maximum', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('exceed maximum allowed percentage');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Apply Points - Invalid Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"invalid_order_123\",\n  \"pointsToUse\": 100,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/apply-points",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "apply-points"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains order not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Order not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Checkout - Use Wallet",
      "item": [
        {
          "name": "Use Wallet - Valid Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"walletAmount\": 50.00,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/use-wallet",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "use-wallet"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 3000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Wallet amount used correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.walletAmountUsed).to.eql(50.00);",
                  "});",
                  "",
                  "pm.test('Updated order total is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.updatedOrderTotal).to.eql(249.00);",
                  "});",
                  "",
                  "pm.test('Transaction ID is generated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.transactionId).to.not.be.null;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Use Wallet - Insufficient Balance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"walletAmount\": 1000.00,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/use-wallet",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "use-wallet"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains insufficient balance', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Insufficient wallet balance');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Use Wallet - Below Minimum Threshold",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"walletAmount\": 5.00,\n  \"orderTotal\": 299.00,\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/checkout/use-wallet",
              "host": ["{{baseUrl}}"],
              "path": ["checkout", "use-wallet"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains minimum threshold', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('below minimum threshold');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Wallet Transactions",
      "item": [
        {
          "name": "Get Transactions - Valid Request",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/wallet/transactions",
              "host": ["{{baseUrl}}"],
              "path": ["wallet", "transactions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Transactions is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.transactions).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Pagination limit is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pagination.limit).to.eql(10);",
                  "});",
                  "",
                  "pm.test('Total transactions is positive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pagination.total).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transactions - With Filters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/wallet/transactions?type=refund&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["wallet", "transactions"],
              "query": [
                {
                  "key": "type",
                  "value": "refund"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Pagination limit is 5', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.pagination.limit).to.eql(5);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Refunds",
      "item": [
        {
          "name": "Trigger Refund - Valid Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"refundAmount\": 75.50,\n  \"refundReason\": \"Customer requested return\",\n  \"refundType\": \"wallet\",\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/refund/trigger",
              "host": ["{{baseUrl}}"],
              "path": ["refund", "trigger"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Refund ID is generated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.refundId).to.not.be.null;",
                  "});",
                  "",
                  "pm.test('Status is processed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.eql('processed');",
                  "});",
                  "",
                  "pm.test('Refund amount is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.refundAmount).to.eql(75.50);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Trigger Refund - Exceed Order Amount",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "{{validToken}}"
              },
              {
                "key": "User-ID",
                "value": "{{userId}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"refundAmount\": 1000.00,\n  \"refundReason\": \"Customer requested return\",\n  \"refundType\": \"wallet\",\n  \"currency\": \"SAR\",\n  \"region\": \"KSA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/refund/trigger",
              "host": ["{{baseUrl}}"],
              "path": ["refund", "trigger"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Success is false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Error message contains exceed order total', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('cannot exceed order total');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Server Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success is true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Status is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.eql('healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
